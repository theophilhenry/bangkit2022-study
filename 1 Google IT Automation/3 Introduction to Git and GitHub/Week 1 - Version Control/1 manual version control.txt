= Version Control =
You write and modify a lot of scripts.
Super important to have detail historical information
It can be for troubleshooting and documentation.

= Diff File =
To compare file or directiries
~$ diff rearrange1.py rearrange2.py
# It will return only the lines that are different.
< : The first line was emoved from the first file 
> : The second line was added to the second file
In other words, old line got replaced by the new one.
'5c5, 6' : line 5 was (c)hanged with line 5 and 6
'11a13,15' : line 11 (a)dded with line 13 to 15

Sometimes it's weird because it's only returns part of the file.
use -u to show difference in another format (extra context).
'-' that get removed, '+' that gets added.

Other diff tools :
~$ wdiff # Highlight the words that changes in a file.
meld, KDiff3, vimdiff.

= Appyling Changes =
~$ diff -u old_file new_file > change.diff # Outputs the diff output to change.diff file.
The diff file are refers to diff or patch file.
How do you apply it?
Patch takes file generated by diff, and applies it to the original file.
~$ patch file_to_patch.py < change.diff
Why not send the whole file lemao?
 1. The original code could've changed. # It wont always word but many cases will.
 
